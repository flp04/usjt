Modelagem de Software
    Edgard Luiz B. Valderramas

MODELOS

problemas computacionais

caracteristicas e comportamentos (funcionalidades) que o software deverá prover (analise de requisitos)
e planejamento de construção

especificação de requisitos

"Lei da parsimônia: reduzir tudo a sua essência para que a forma harmonize com a função." "Definir e projetar a arquitetura de um sistema é uma atividade criativa e produtiva." Cris Kobrin

Processo de Desenvolvimento de Software
    estilo em cascata subdivide o projeto com base nas atividades
    estilo iterativo subdivide o projeto em subconjuntos de funcionalidade 
modelo cascata - incremental iterativo (RUP)

UML [Unified Modeling Language] |Linguagem de Modelagem Unificada|: "uma família de notações gráficas, apoiada por um metamodelo único"
notação é o material gráfico que você vê nos modelos, a sintaxe gráfica da linguagem

Usado como esboço (sendo sua essência a seletividade), projeto (tem como foco a completeza) e linguagem de programação

Perspectiva de software, diz respeito a elementos de software, e perspectiva conceitual que representa a descrição dos conceitos do domínio de estudo


tipos de software:
    - sw básicou ou de sistema (BIOS, Interface Gráfica, S.O) - controladores, ferramentas de diagnóstico, carregadores e controladores
    - sw utilitário: demandas específicas do mercado (editor de texto, planilhas eletronicas, antivirus)
    - sw de linguagens de programação (compostos por compiladores (análise sintática e lexica), interpretadores, depuradores e ambientes IDE) 
    - sw aplicativo: programas stand-alone. processados sem a necessidade de recursos de rede interna ou externa
    - aplicações web: 
    - sw de IA
    - sw embutidos

1990 - Tim Berners-Lee Hipertexto World Wide Web (hipertexto + TCP + Domain Name System)

*códigos mnemonicos
*sistemas legados = sistemas herdados
*cientistas de dados/estatisticos

SGBD (Sistemas Gerenciadores de Banco de Dados)

1. O que é um SW para vc? Para que serve? Dê exemplos
    um sistema desenvolvido para resolver um problema computacional que serve para atender os requisitos do usuario
    windows, visual studio code, google chrome, duolingo 

2. Pq vc acredita que seja importante a utilização de uma modelagem para o desenvolvimento de sw?
    sim, desde para organizar a codificação e implementação, para garantir a manutenção e escalabilidade eficaz

|requirement|
Engenharia de Requisitos de Sistema: "O que o sistema deve fazer?" Caracteristicas/funcionalidades: Quais são as funcionalidades do software?

    - Requisitos funcionais
    - Requisitos não funcionais (restrição/qualidade/funcionalidade)

    - de usuario: alto nível
    - de sistema: baixo nível

    -de negócios    

    Taxinomia dos Requisitos não-Funcionais
        *taxinomia: ramo da biologia responsável por descrever e nomear os seres vivos

        MTBS (Mean Time Between Failures)

    Autenticação

        extração |elicitation| -> descobrir -> classificar -> priorizar -> documentar
        análise
        validação
        gerenciamento

arquitetura
    - linguagem
    - servidor de banco de dados
    - servidor de aplicação

'Automatizar um processo de negócios'

happy path -> caminho feliz

TCO (Total Cost Ownreship)

Analista de negócios: levantamento de requisitos    
analista de sistemas: análise dos requisitos
arquiteto de sistemas: projeto do sistema
desenvolvedor: código e teste unitário
testador: teste de sistema

a engenharia de requisitos não é uma tarefa linear

Especificação de requisitos -> estudo de vialbilidade -> elicitação de requisitos de usuario -> elicitação de requisitos de sistema -> especificação de requisitos de usuario -> especificação e modelagem dos requisitos de sistema -> prototipação -> revisões

metodologia XGH (Xtreme Go Horse)

Extração de requisitos -> Elicitar: listar, esclarecer, descobrir
-> descobrir -> classificar -> priorizar -> documentar

Machion = jnyzvrhplo

Documentação de requisitos:
    definição de requisitos: linguagem formal
        ->importancia: obrigatórios e desejaveis
        ->classificação: funcionais (RF), não funcionais (NRF), regras de negócios (RN: existem independente do sistema)
    especificação de requisitos: linguagem técnica

assumption

Modelo de Software abstração do sistema 
    aspectos: {
        estruturais
        comportamentais
    }

Engenharia de Requisitos: O que fazer?
    -levantamento
    -analise
    -validação
    -gerenciamento
Projeto: Como fazer?
Codificação: Fazer
Testes: Validar
implementação: Entrega

Modelo Relacional
    Entidade - Relacionamento
Diagrama de Classes
BD


Booch
OMT - Jacobson
OOSE - Rumbaugh

OMG
    standards
        **UML**

    Diagramas: estrutural e comportamental
        classe, objetos, componentes, implantação, composição, pacote, casos de uso, sequencia, comunicação, atividade, estados, interação, tempo

    Relacionamentos:
        associação entre classes
        generalização
        dependência

    Casos de uso: atores, casos de uso, relacionamentos
        Atores: Representam elementos externos ao sistema (podendo ser humano ou outro sistema). Eles interagem com o sistema
        Casos de Uso: Representam uma funcionalidade do sistema e é iniciado por um ator ou outro caso de uso. (seu nome deve iniciar com um verbo)
        Relacionamentos
            Associação: indica que há uma interação
            Generalização (herança): dois ou mais atores podem se comunicar com o mesmo caso de uso
                Também pode haver generalização entre casos de uso, podendo o caso de uso filho se comportar de forma diferente do caso de uso pai
            Dependência (Extensão* e Inclusão): variação do caso de uso base  (executado somente sob certas circunstâncias)
                *caminho alternativo
        Fronteira do Sistema: define os limites do sistema

        Especificação de Casos de Uso
            Nome
            Descrição
            Fluxo de Eventos
                Fluxo Básico: iniciado pelo ator (como um dialogo entre o ator e o sistema)
                Fluxos Alternativos: comportamentos alternativos (exceções ao fluxo principal, podendo ser tão extenso quanto necessário)
                    SubFluxo Alternativo
                Requisitos Especiais (normalmente um requisito não funcional específico, não explicado de maneira fácil)
                Pré-condições (estado do sistema presente para execução)
                Pós-condições (como o sistema deverá estar após a execução)
                Pontos de Extensão

            Glossario

POO - Programação Orientada a Objetos
    Abstração
    Encapsulamento
        Visibilidade
    Herança
    Polimorfismo (varias formas)
        Sobreposição
        Sobrecarga, sobreescrita e generics

Cliente -> Servidor


Diagrama de Classes
    Classes
    Relacionamento:
        nome
        sentido de leitura
        navegabilidade (um ou outro sabe o quem te pertence, enquanto o outro ou um não sabe) Pessoa sabe seu Endereço, mas Endereço não sabe sua Pessoa
        multiplicidade
        papéis
        tipo: Associação, Agregação, Composição: 'todo-parte', parte só pode fazer parte de um todo e seus tempo de vida coincidem, Generalização: herança dos comportamentos (super e subclasses) | polimorfismo e Dependência: alteração de um objeto pode afetar outro 
    Relações entre classes


Princípios fundamentais: alta coesão (cada elemento e responsabilidade dentro de sua classe) e baixo acoplamento

Classe: nome de classes são representados por substantivos no singular

Estado: valor naquele determinado instante

Assinatura do método

Estrutura de Dados

Dominio

UML Essencial. Fowler, Martin
sebesta Programação


https://astah.net/products/free-student-license/

Dado: fato do mundo real regisrado
fatos conhecidos que possuem um signifcado implicito e podem ser registrados
{
    Simples: numeros, textos
    Complexos: sons, imagens, sequencias

    Temporario
    Permanente
}

Para se tornar informação necessita de um contexto

Piramide do conhecimento
Inovação
Sabedoria -> justificação
Conhecimento -> interpretação
Informação -> estruturação
Dado -> medições/observações

comma separetad values

SGBD: Sistema Gerenciador de Banco de Dados {
    armazenamento
    backup
    meios de controle
    linguagem de consulta
}
Controle de concorrência

Esquema externo -> Esquema conceitual -> Esquema físico
(requisitos)

Conceitual: descrição abstrata da base de dados
Modelo lógico: visão do usuario programador
Modelo físico

SQL: Struture Query Language (Linguagem de Consulta Estruturada) [padrão ANSI]
{
    DDL: Data Definition Language: define o esquema de dados
    DML: Data Manipulation Language: permite o acesso e manipulação
    DCL: Data Control Language: define as permissões de uso

}

Mini-mundo(ou universo de discurso): dominio da aplicação
Conjunto de conceitos usados 

Modelo Entidade-Relacionamento (Peter Chen, 1976):
    Representação com alto nível de abstração com objetivo de representar a semantica associada aos dados do minimundo. Seus conceitos são intuitivos, permitindo que projetistas criem o conceito sem qualquer uso de tecnologia

    Entidade: algo do mundo real identificavel distintamente com existência independente. Possui atributos (podendo ser também compostos, multivalorados e identificadores)

    Relacionamento: associação entre entidades, podendo ser do grau binario (duas entidades: empregado < trabalha > empresa) e ternario (tres entidades: fornecedor<fornece>peça<fornece>projeto) e recursiva (uma entidade: empregado><supervisiona)
        >relacionamentos também podem ter atributos
        Restrições: cardinalidade (máxima e minima)

Diagrama Entidade-Relacionamento

Arquitetura de 3 camadas
PC -> App -> BD

Arquitetura de 4 camadas
Browser -> Servidor WEB -> MS -> BD

Master Data Management
redundância (inconsistente ou não)
Meta-dados: dicionário de dados (dado dos dados)

Usuarios do BD
{
    Administrador
    Projetista
    Programador
    Usuario Final
}

Conceitual: quais dados e como eles se relacionam {
    MER (DER: Diagrama Entidade Relacionamento)
    OO (Diagrama de Classes)
}
Lógico {
    Relacionais
    Não relacionais
}
Físico

Diagrama de interação: casos de uso
Diagrama estrutural: classes
Diagrama de dados: entidade-relacionamento

Entidade associativa

Sistema de Informação: um software multiusuario ligado a um banco de dados para processar informações
UML Essencial. Fowler, Martin

Conceitual: quais dados e como eles se relacionam {
    MER (DER: Diagrama Entidade Relacionamento)
    OO (Diagrama de Classes)
}
Lógico {
    Relacionais
    Não relacionais
}
Físico

Diagrama de interação: casos de uso
Diagrama estrutural: classes
Diagrama de dados: entidade-relacionamento

Entidade associativa


Hierarquia de Herança de Classe{
    Throwable{
        Exception{
            RunTimeException{
                ClassCastException
                ArrayIndexOutOfBoundsException
                NullPointerException
            }
            IOException
        }
        Error{
            AWT Error
            Thread Death
            OutOfMemory
        }
    }
}